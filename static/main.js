// static/main.js
document.addEventListener("DOMContentLoaded", function () {
  const dropZone1 = document.getElementById("drop-zone-1");
  const dropZone2 = document.getElementById("drop-zone-2");
  const fileInput1 = document.getElementById("file-input-1");
  const fileInput2 = document.getElementById("file-input-2");
  const compareBtn = document.getElementById("compare-button");
  const loadingDiv = document.getElementById("loading");
  const resultDiv = document.getElementById("result");

  let file1 = null;
  let file2 = null;

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è Drag & Drop
  setupDropZone(dropZone1, (file) => {
    file1 = file;
    dropZone1.textContent = "‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: " + file.name;
    checkReady();
  });

  setupDropZone(dropZone2, (file) => {
    file2 = file;
    dropZone2.textContent = "‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: " + file.name;
    checkReady();
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è File Input
  fileInput1.addEventListener("change", (e) => {
    const file = e.target.files[0];
    if (file && file.type.startsWith("image/")) {
      file1 = file;
      dropZone1.textContent = "‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: " + file.name;
      checkReady();
    }
  });

  fileInput2.addEventListener("change", (e) => {
    const file = e.target.files[0];
    if (file && file.type.startsWith("image/")) {
      file2 = file;
      dropZone2.textContent = "‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: " + file.name;
      checkReady();
    }
  });

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫–Ω–æ–ø–∫–∏
  function checkReady() {
    compareBtn.disabled = !(file1 && file2);
  }

  async function checkUsage() {
    try {
        const res = await fetch('/usage');
        const data = await res.json();
        if (data.limit_reached) {
        alert(`‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Vision API: ${data.count} –∏–∑ ${data.monthly_limit}`);
        document.getElementById('compare-button').disabled = true;
        return false;
        }
        return true;
    } catch (e) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–∞:", e);
        return true; // –†–∞–∑—Ä–µ—à–∞–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –Ω–∞ —Å–ª—É—á–∞–π –æ—à–∏–±–∫–∏
    }
    }

  // –õ–æ–≥–∏–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
  compareBtn.addEventListener("click", async () => {
    if (!file1 || !file2) return;
    if(!checkUsage()) return;
    const formData = new FormData();
    formData.append("file1", file1);
    formData.append("file2", file2);

    loadingDiv.style.display = "block";
    resultDiv.style.display = "none";

    try {
      const res = await fetch("/compare/", {
        method: "POST",
        body: formData,
      });
      const data = await res.json();

      let html = `
        <div class="similarity">üéØ –°—Ö–æ–∂–µ—Å—Ç—å: ${data.similarity.toFixed(1)}%</div>
        <h3>üìò –≠—Ç–∞–ª–æ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:</h3>
        <div class="text-block">${data.text1}</div>
        <h3>üìï –¢–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:</h3>
        <div class="text-block">${data.text2}</div>
        <h3>üìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ä–∞–∑–ª–∏—á–∏—è</h3>
      `;

      if (data.deleted.length > 0) {
        html += `<div>`;
        data.deleted.forEach(d => {
          html += `<div class="difference-item deleted">üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ: ${d.old}</div>`;
        });
        html += `</div>`;
      }

      if (data.modified.length > 0) {
        html += `<div>`;
        data.modified.forEach(m => {
          html += `<div class="difference-item modified">
                    üîÑ –ò–∑–º–µ–Ω–µ–Ω–æ (${m.similarity.toFixed(1)}%):<br>
                    –ë—ã–ª–æ: ${m.old}<br>
                    –°—Ç–∞–ª–æ: ${m.new}
                  </div>`;
        });
        html += `</div>`;
      }

      if (data.added.length > 0) {
        html += `<div>`;
        data.added.forEach(a => {
          html += `<div class="difference-item added">üü¢ –î–æ–±–∞–≤–ª–µ–Ω–æ: ${a.new}</div>`;
        });
        html += `</div>`;
      }

      if (data.deleted.length === 0 && data.modified.length === 0 && data.added.length === 0) {
        html += `<p>‚úÖ –í—Å–µ —Å—Ç—Ä–æ–∫–∏ —Å–æ–≤–ø–∞–¥–∞—é—Ç —Å —ç—Ç–∞–ª–æ–Ω–æ–º.</p>`;
      }

      resultDiv.innerHTML = html;
      resultDiv.style.display = "block";
    } catch (error) {
      resultDiv.innerHTML = `<p style="color:red;">‚ùå –û—à–∏–±–∫–∞: ${error.message}</p>`;
      resultDiv.style.display = "block";
    } finally {
      loadingDiv.style.display = "none";
    }
    updateUsageDisplay();
  });

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–æ–Ω—ã –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
  function setupDropZone(zone, onFileDrop) {
    zone.addEventListener("dragover", (e) => {
      e.preventDefault();
      zone.classList.add("dragover");
    });

    zone.addEventListener("dragleave", () => {
      zone.classList.remove("dragover");
    });

    zone.addEventListener("drop", (e) => {
      e.preventDefault();
      zone.classList.remove("dragover");

      const droppedFile = e.dataTransfer.files[0];
      if (droppedFile && droppedFile.type.startsWith("image/")) {
        onFileDrop(droppedFile);
      } else {
        alert("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.");
      }
    });
  }

  async function updateUsageDisplay() {
    const res = await fetch('/usage');
    const data = await res.json();
    document.getElementById('usage-count').textContent = data.count;
    }

    window.addEventListener('load', updateUsageDisplay);
});